import { Type as ToxicType, Direction as ToxicDirection } from "./Toxic";
export interface IProxyBody {
    name: string;
    listen: string;
    upstream: string;
    enabled?: boolean;
}
export interface IProxyResponse {
    name: string;
    listen: string;
    upstream: string;
    enabled: boolean;
    toxics: IToxicResponse<any>[];
}
export interface IToxicBody<T> {
    name: string;
    stream: ToxicDirection;
    type: ToxicType;
    toxicity: number;
    attributes: T;
}
export interface IToxicResponse<T> extends IToxicBody<T> {
}
export interface IGetProxiesResponse {
    [name: string]: IGetProxyResponse;
}
export interface ICreateProxyBody extends IProxyBody {
}
export interface ICreateProxyResponse extends IProxyResponse {
}
export interface IPopulateProxiesBody extends Array<IProxyBody> {
}
export interface IPopulateProxiesResponse {
    proxies: IProxyResponse[];
}
export interface IGetProxyResponse extends IProxyResponse {
}
export interface IUpdateProxyBody {
    enabled: boolean;
    listen: string;
    upstream: string;
}
export interface IUpdateProxyResponse extends IProxyResponse {
}
export interface IGetToxicsResponse<T> extends Array<IToxicResponse<T>> {
}
export interface ICreateToxicBody<T> extends IToxicBody<T> {
}
export interface ICreateToxicResponse<T> extends IToxicResponse<T> {
}
export interface IGetToxicResponse<T> extends IToxicResponse<T> {
}
export interface IUpdateToxicBody<T> extends IToxicBody<T> {
}
export interface IUpdateToxicResponse<T> extends IToxicResponse<T> {
}
