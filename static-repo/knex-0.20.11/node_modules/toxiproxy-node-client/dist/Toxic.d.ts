import Proxy from "./Proxy";
import { ICreateToxicBody } from "./interfaces";
export declare type Direction = "upstream" | "downstream";
export declare type Type = "latency" | "down" | "bandwidth" | "slow_close" | "timeout" | "slicer";
export interface Latency {
    latency: number;
    jitter: number;
}
export interface Down {
}
export interface Bandwidth {
    rate: number;
}
export interface Slowclose {
    delay: number;
}
export interface Timeout {
    timeout: number;
}
export interface Slicer {
    average_size: number;
    size_variation: number;
    delay: number;
}
export declare type AttributeTypes = Latency | Down | Bandwidth | Slowclose | Timeout | Slicer;
export interface ToxicJson<T> {
    name: string;
    type: Type;
    stream: Direction;
    toxicity: number;
    attributes: T;
}
export default class Toxic<T> {
    proxy: Proxy;
    name: string;
    type: Type;
    stream: Direction;
    toxicity: number;
    attributes: T;
    constructor(proxy: Proxy, body: ICreateToxicBody<T>);
    parseBody(body: ICreateToxicBody<T>): void;
    toJson(): ToxicJson<T>;
    getHost(): string;
    getPath(): string;
    remove(): Promise<void>;
    refresh(): Promise<void>;
    update(): Promise<void>;
}
