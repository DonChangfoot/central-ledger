"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const Toxiproxy_1 = require("./Toxiproxy");
exports.toxiproxyUrl = "http://localhost:8474";
exports.createProxy = (t, name) => __awaiter(this, void 0, void 0, function* () {
    const toxiproxy = new Toxiproxy_1.default(exports.toxiproxyUrl);
    const body = {
        listen: "localhost:0",
        name: name,
        upstream: "localhost:6379"
    };
    const proxy = yield toxiproxy.createProxy(body);
    t.is(body.name, proxy.name);
    return { proxy, toxiproxy };
});
exports.createToxic = (t, proxy, type, attributes) => __awaiter(this, void 0, void 0, function* () {
    const body = {
        attributes: attributes,
        type: type
    };
    const toxic = yield proxy.addToxic(body);
    t.is(body.type, toxic.type);
    t.is(toxic.name, proxy.toxics[proxy.toxics.length - 1].name);
    return toxic;
});
