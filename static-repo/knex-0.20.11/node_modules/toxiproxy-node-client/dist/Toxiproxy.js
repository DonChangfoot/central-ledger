"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const rp = require("request-promise-native");
const HttpStatus = require("http-status");
const Proxy_1 = require("./Proxy");
class Toxiproxy {
    constructor(host) {
        this.host = host;
    }
    createProxy(body) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return new Proxy_1.default(this, yield rp.post({
                    body: body,
                    json: true,
                    url: `${this.host}/proxies`
                }));
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                if (err.statusCode === HttpStatus.CONFLICT) {
                    throw new Error(`Proxy ${body.name} already exists`);
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    populate(body) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield rp.post({
                    body: body,
                    json: true,
                    url: `${this.host}/populate`
                });
                const proxies = {};
                for (const proxyResponse of res.proxies) {
                    proxies[proxyResponse.name] = new Proxy_1.default(this, proxyResponse);
                }
                return proxies;
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    get(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return new Proxy_1.default(this, yield rp.get({
                    json: true,
                    url: `${this.host}/proxies/${name}`
                }));
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    getVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield rp.get({
                    json: true,
                    url: `${this.host}/version`
                });
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    reset() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield rp.post({
                    json: true,
                    url: `${this.host}/reset`
                });
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.NO_CONTENT}: ${err.statusCode}`);
            }
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const responses = yield rp.get({
                    json: true,
                    url: `${this.host}/proxies`
                });
                const proxies = {};
                for (const name in responses) {
                    proxies[name] = new Proxy_1.default(this, responses[name]);
                }
                return proxies;
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Toxiproxy;
