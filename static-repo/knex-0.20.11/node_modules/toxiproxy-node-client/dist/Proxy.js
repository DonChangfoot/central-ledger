"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const rp = require("request-promise-native");
const HttpStatus = require("http-status");
const Toxic_1 = require("./Toxic");
class Proxy {
    constructor(toxiproxy, body) {
        this.toxiproxy = toxiproxy;
        const { name, listen, upstream, enabled, toxics } = body;
        this.name = name;
        this.listen = listen;
        this.upstream = upstream;
        this.enabled = enabled;
        this.setToxics(toxics);
    }
    toJson() {
        return {
            enabled: this.enabled,
            listen: this.listen,
            name: this.name,
            toxics: this.toxics.map((toxic) => toxic.toJson()),
            upstream: this.upstream
        };
    }
    setToxics(toxics) {
        this.toxics = toxics.map((v) => new Toxic_1.default(this, v));
    }
    getHost() {
        return this.toxiproxy.host;
    }
    getPath() {
        return `${this.getHost()}/proxies/${this.name}`;
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield rp.delete({ url: this.getPath() });
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.NO_CONTENT}: ${err.statusCode}`);
            }
        });
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const body = {
                    enabled: this.enabled,
                    listen: this.listen,
                    upstream: this.upstream
                };
                const res = yield rp.post({
                    body: body,
                    json: true,
                    url: `${this.getPath()}`
                });
                return new Proxy(this.toxiproxy, res);
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    refreshToxics() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield rp.get({
                    json: true,
                    url: `${this.getPath()}/toxics`
                });
                this.setToxics(res);
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    addToxic(body) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const toxic = yield new Toxic_1.default(this, yield rp.post({
                    body: body,
                    json: true,
                    url: `${this.getPath()}/toxics`
                }));
                this.toxics.push(toxic);
                return toxic;
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Proxy;
