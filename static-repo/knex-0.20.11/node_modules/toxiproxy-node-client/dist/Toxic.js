"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const rp = require("request-promise-native");
const HttpStatus = require("http-status");
class Toxic {
    constructor(proxy, body) {
        this.proxy = proxy;
        this.parseBody(body);
    }
    parseBody(body) {
        const { name, type, stream, toxicity, attributes } = body;
        this.name = name;
        this.type = type;
        this.stream = stream;
        this.toxicity = toxicity;
        this.attributes = attributes;
    }
    toJson() {
        return {
            attributes: this.attributes,
            name: this.name,
            stream: this.stream,
            toxicity: this.toxicity,
            type: this.type
        };
    }
    getHost() {
        return this.proxy.getHost();
    }
    getPath() {
        return `${this.proxy.getPath()}/toxics/${this.name}`;
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield rp.delete({ url: this.getPath() });
                for (const key in this.proxy.toxics) {
                    const toxic = this.proxy.toxics[key];
                    if (toxic.name === this.name) {
                        delete this.proxy.toxics[key];
                    }
                }
                return Promise.resolve();
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.NO_CONTENT}: ${err.statusCode}`);
            }
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield rp.get({
                    json: true,
                    url: `${this.getPath()}`
                });
                this.parseBody(res);
                return Promise.resolve();
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const body = this.toJson();
                const res = yield rp.post({
                    body: body,
                    json: true,
                    url: `${this.getPath()}`
                });
                this.parseBody(res);
                return Promise.resolve();
            }
            catch (err) {
                if (!("statusCode" in err)) {
                    throw err;
                }
                throw new Error(`Response status was not ${HttpStatus.OK}: ${err.statusCode}`);
            }
        });
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Toxic;
